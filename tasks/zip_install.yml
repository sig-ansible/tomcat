---
- name: Fetch zip hash
  include_tasks: zip_install_fetch_hash.yml
  when: not (tomcat_zip_hash | default(false))
  tags: always

# TODO: Stop using tomcat_inst_name and use the original zip file name. The way
#       it is, it'll re-download the file if there are multiple Tomcat instances
#       defined.
- name: zip_install > Download Tomcat
  get_url:
    url: "{{ tomcat_zip_url }}"
    dest: "{{ stage_dir }}/{{ tomcat_inst_name }}.zip"
    # TODO: Replace checksum with a PGP check
    checksum: "{{ tomcat_zip_hash }}"

# The root of the Tomcat zip is a directory. This directory might not be
# what we want to name the Tomcat root. To accomodate this we first unarchive
# to a temporary directory in the staging area. We then move the directory
# the zip created to it's destination and possibly rename it.
#
# TODO: We might also want to introduce a variable allowing user control of
#       where the temp files are expanded.
- name: zip_install > Create temporary staging area
  tempfile:
    state: directory
  register: tempdir

- name: zip_install > Unzip Tomcat
  unarchive:
    src: "{{ stage_dir }}/{{ tomcat_inst_name }}.zip"
    dest: "{{ tempdir.path }}"
    copy: no

- name: zip_install > Deploy Tomcat
  command: mv "{{ tempdir.path }}/{{ tomcat_zip_root_dir }}" "{{ tomcat_root }}"
  when: true # This whole file only gets executed when there's something to do.
             # We use the when:true to satisfy the linting tool.

- name: zip_install > Remove temporary directory
  file:
    path: "{{ tempdir.path }}"
    state: absent

- import_tasks: post_install.yml
